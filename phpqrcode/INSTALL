<?php

// Подключите только этот файл, остальные необходимые файлы будут автоматически подключены из него
include "qrlib.php";

// Записываем QR-код в файл
// Уровень коррекции ошибок самый низкий - L (можно выбрать из: L, M, Q, H)
// Каждый квадрат кода будет размером 4x4 пикселя (увеличение в 4 раза)
// Код будет иметь 2 белых квадрата по краям в качестве границы
QRcode::png('PHP QR Code :)', 'test.png', 'L', 4, 2);

// То же самое, но выводит QR-код напрямую в браузер (с правильными заголовками и т. д.)
// Все остальные настройки остаются по умолчанию
// ВНИМАНИЕ! Это должен быть ПЕРВЫЙ и ЕДИНСТВЕННЫЙ вывод в скрипте, иначе
// оставшаяся часть вывода попадет внутрь PNG-файла, что наверняка его испортит
QRcode::png('PHP QR Code :)');

// Показать результаты бенчмарка
QRtools::timeBenchmark();

// Перестроить кэш
QRtools::buildCache();

// Генерация кода в текстовом режиме — как двоичная таблица
// Затем отображается в HTML с использованием Unicode-символов блочного построения
$tab = $qr->encode('PHP QR Code :)');
QRspec::debug($tab, true);

// === ИНТЕГРАЦИЯ С TCPDF ===

// В папке bindings/tcpdf находится немного измененный файл 2dbarcodes.php
// Установите библиотеку phpqrcode в папку tcpdf, затем замените (или объедините) файл 2dbarcodes.php

// Использование аналогично примеру №50 из документации TCPDF
$style = array(
    'border' => true,   // Добавить рамку вокруг QR-кода
    'padding' => 4,     // Отступ внутри рамки
    'fgcolor' => array(0, 0, 0), // Цвет переднего плана (чёрный)
    'bgcolor' => false, // Цвет фона (false = прозрачный, можно задать, например, array(255,255,255) - белый)
);

// Генерация QR-кода с указанием уровня коррекции ошибок (L, M, Q, H)
$pdf->write2DBarcode('PHP QR Code :)', 'QR,L', '', '', 30, 30, $style, 'N');
