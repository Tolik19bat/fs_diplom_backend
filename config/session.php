<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Драйвер сеанса по умолчанию
    |--------------------------------------------------------------------------
    |
    | Этот параметр определяет драйвер сеанса по умолчанию, который используется для
    | входящих запросов. Laravel поддерживает различные варианты хранения для
    | сохранения данных сеанса. Хранилище базы данных — отличный выбор по умолчанию.
    |
    | Поддерживается: "file", "cookie", "database", "apc",
    | "memcached", "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Время жизни сеанса
    |--------------------------------------------------------------------------
    |
    | Здесь вы можете указать количество минут, в течение которых сеанс
    | может оставаться бездействующим до истечения срока действия. Если вы хотите, чтобы они
    | истекали немедленно при закрытии браузера, вы можете
    | указать это с помощью параметра конфигурации expire_on_close.
    |
    */

    'lifetime' => env('SESSION_LIFETIME', 120),

    'expire_on_close' => env('SESSION_EXPIRE_ON_CLOSE', false),

    /*
    |--------------------------------------------------------------------------
    | Шифрование сеанса
    |--------------------------------------------------------------------------
    |
    | Эта опция позволяет вам легко указать, что все ваши данные сеанса
    | должны быть зашифрованы перед сохранением. Все шифрование выполняется Laravel
    | автоматически, и вы можете использовать сеанс как обычно.
    |
    */

    'encrypt' => env('SESSION_ENCRYPT', false),

    /*
    |--------------------------------------------------------------------------
    | Расположение файла сеанса
    |--------------------------------------------------------------------------
    |
    | При использовании драйвера сеанса «файл» файлы сеанса размещаются
    | на диске. Место хранения по умолчанию определено здесь; однако вы
    | можете указать другое место, где они должны храниться.
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |-------------------------------------------------------------------------
    | Сеансовое подключение к базе данных
    |-------------------------------------------------------------------------
    |
    | При использовании драйверов сеанса «database» или «redis» вы можете указать
    | подключение, которое должно использоваться для управления этими сеансами. Это должно
    | соответствовать подключению в параметрах конфигурации вашей базы данных.
    |
    */

    'connection' => env('SESSION_CONNECTION'),

    /*
    |--------------------------------------------------------------------------
    | Таблица базы данных сеансов
    |--------------------------------------------------------------------------
    |
    | При использовании драйвера сеанса «база данных» вы можете указать таблицу, которая
    | будет использоваться для хранения сеансов. Конечно, для вас определено разумное значение по умолчанию; однако вы можете изменить его на другую таблицу.
    |
    */

    'table' => env('SESSION_TABLE', 'sessions'),

    /*
    |--------------------------------------------------------------------------
    | Кэш-хранилище сеанса
    |--------------------------------------------------------------------------
    |
    | При использовании одного из кэш-серверов сеанса фреймворка, управляемого кэшем, вы можете
    | определить кэш-хранилище, которое должно использоваться для хранения данных сеанса
    | между запросами. Оно должно соответствовать одному из определенных вами кэш-хранилищ.
    |
    | Влияет на: "apc", "dynamodb", "memcached", "redis"
    |
    */

    'store' => env('SESSION_STORE'),

    /*
    |--------------------------------------------------------------------------
    | Лотерея очистки сеанса
    |--------------------------------------------------------------------------
    |
    | Некоторые драйверы сеансов должны вручную очищать свое хранилище, чтобы
    | избавиться от старых сеансов из хранилища. Вот вероятность того, что это
    | произойдет при заданном запросе. По умолчанию вероятность составляет 2 из 100.
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | Имя сеансового cookie-файла
    |--------------------------------------------------------------------------
    |
    | Здесь вы можете изменить имя сеансового cookie-файла, созданного
    | фреймворком. Обычно вам не нужно менять это значение,
    | поскольку это не обеспечивает существенного улучшения безопасности.
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
    ),

    /*
    |--------------------------------------------------------------------------
    | Путь к файлу cookie сеанса
    |--------------------------------------------------------------------------
    |
    | Путь к файлу cookie сеанса определяет путь, для которого файл cookie будет
    | считаться доступным. Обычно это будет корневой путь
    | вашего приложения, но вы можете изменить его при необходимости.
    |
    */

    'path' => env('SESSION_PATH', '/'),

    /*
    |-------------------------------------------------------------------------
    | Домен сеансового cookie-файла
    |--------------------------------------------------------------------------
    |
    | Это значение определяет домен и поддомены, для которых доступен сеансовый cookie-файл
    |. По умолчанию cookie-файл будет доступен корневому
    | домену и всем поддоменам. Обычно это не следует менять.
    |
    */

    'domain' => env('SESSION_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
    | By setting this option to true, session cookies will only be sent back
    | to the server if the browser has a HTTPS connection. This will keep
    | the cookie from being sent to you when it can't be done securely.
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | Файлы cookie только HTTPS
    |--------------------------------------------------------------------------
    |
    | Если установить этот параметр в значение true, файлы cookie сеанса будут отправляться обратно
    | на сервер, только если браузер имеет соединение HTTPS. Это предотвратит отправку
    | файлов cookie вам, когда это невозможно сделать безопасно.
    |
    */

    'http_only' => env('SESSION_HTTP_ONLY', true),

    /*
    |--------------------------------------------------------------------------
    | Файлы cookie одного сайта
    |--------------------------------------------------------------------------
    |
    | Этот параметр определяет, как ведут себя ваши файлы cookie при выполнении межсайтовых запросов
    | и может использоваться для смягчения атак CSRF. По умолчанию мы
    | установим это значение на «lax», чтобы разрешить безопасные межсайтовые запросы.
    |
    | См.: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value
    |
    | Поддерживается: «lax», «strict», «none», null
    |
    */

    'same_site' => env('SESSION_SAME_SITE', 'lax'),

    /*
    |--------------------------------------------------------------------------
    | Разделенные файлы cookie
    |--------------------------------------------------------------------------
    |
    | Установка этого значения в true привяжет файл cookie к сайту верхнего уровня для
    | межсайтового контекста. Разделенные файлы cookie принимаются браузером,
    | когда помечены как «безопасные-secure», а атрибут Same-Site установлен в значение «нет-none».
    |
    */

    'partitioned' => env('SESSION_PARTITIONED_COOKIE', false),

];
